#!/usr/bin/env perl

use v5.30;
use warnings;

use lib 'scripts';
use release;

use Getopt::Long;

sub usage {
    print STDERR <<~USAGE;
usage: $0 <version> <s3url> <assets>...

  <version> must be in the form of:

  v#.#-<word>#

  where <word> may be one of "alpha", "beta", and "rc". Everything following the
  hyphen ("-"), including the hyphen, is optional.
USAGE
  exit 1;
}

sub finalize_changelog {
    my ($opt) = @_;
    my $date = localtime;

    open my $fh, '>', $opt->{changelog}
        or progress_quit("cannot write $opt->{changelog}: $!");

    print $fh "# Changelog\n\n";
    print $fh "## $opt->{version} $date\n\n";
    print $fh $opt->{notes};
    print $fh $opt->{footer};

    close $fh;
}

sub release_notes {
    my ($version, $notes) = @_;

    open my $rh, '>', dist_dir . "/$version.md"
        or progress_quit("cannot write to ".dist_dir."/$version.md: $!");

    my $now = localtime;

    print $rh "## Release Notes\n\n";
    print $rh "The following changes have been made this release:\n\n";
    print $rh $notes;

    close $rh;

    return dist_dir."/$version.md";
}

sub MAIN {
    my @assets = @_;

    usage() unless @assets > 0;

    # version comes from current release tag
    progress_item("Discovering release tag ... ");
    my $release_tag = "";
    capture_run(['git', 'tag', '-l', 'release-*'], sub {
        my ($line) = @_;
        chomp $line;
        if ($release_tag ne "") {
            progress_quit("Found at least two release tags, '$release_tag' and '$line'.");
        }
        $release_tag = $line;
    });
    my $version = $release_tag =~ s/^release-/v/r;
    if ($version !~ /^v/) {
        progress_quit("Version tag '$release_tag' could not be converted to version tag.");
    }
    progress_status("OK");

    # s3url comes from current release tag
    progress_item("Reconstructing S3 URL ... ");
    my $s3url = s3base_url . $release_tag;
    progress_status("OK");

    # Sanity check
    progress_item("Checking for tag $version ... ");
    verify_tag($version);
    progress_status("OK");

    # Finish the change log
    progress_item("Finalizing changelog ... ");
    my ($notes, $footer) = slurp_top_entry(changelog_file);
    finalize_changelog({
        changelog => changelog_file,
        notes     => $notes,
        footer    => $footer,
        version   => $version,
    });

    # Add updated changelog to the repo
    run('git', 'add', changelog_file);
    run('git', 'commit', '-m', 'changelog');
    progress_status("OK");

    # Genereate release notes
    progress_item("Finalizing notes file ... ");
    my $notes_file = release_notes($version, $notes);
    progress_item($notes_file);
    progress_status("OK");

    # Setup release tag
    progress_item("Tagging $version ... ");
    run('git', 'tag', $version);
    progress_status("OK");

    # Push changes to github
    progress_item("Publishing changes ... ");
    run('git', 'push', 'origin', 'master');
    run('git', 'push', 'origin', $version);
    progress_status("OK");

    # Draft the release
    progress_item("Drafting a $version release ... ");
    my @extras;
    if ($version =~ /-\w+/) {
        @extras = qw( --prerelease );
    }
    run(
        'gh', 'release', 'create', $version, '-d', '-F', $notes_file, '-t', $version,
        @extras,
    );
    progress_status("OK");

    # Pull assets from S3
    for my $asset (@assets) {
        progress_item("Pulling $asset from $s3url ... ");
        run(
            'aws', 's3', 'cp', "$s3url/$asset", dist_dir."/$asset",
        );
        progress_status("OK");
    }

    # Add assets
    for my $asset (@assets) {
        progress_item("Releasing $asset ... ");
        run(
            'gh', 'release', 'upload', $version, dist_dir."/$asset", '--clobber',
        );
        progress_status("OK");
    }

    # Delete the release trigger tag
    progress_item("Removing tag $release_tag ... ");
    run('git', 'tag', '-d', $release_tag);
    run('git', 'push', 'origin', ":$release_tag");
    progress_status("OK");


    # Final instructions
    print <<INSTRUCTIONS;

Your release is now complete but for publishing. Please visit the releases page at the link below to publish the draft release:

  https://github.com/zostay/garotate/releases

INSTRUCTIONS
}

MAIN(@ARGV)
